14 December 2011 03:15:02 PM

ZIGGURAT_OPENMP:
  C++ version

  Number of processors available = 8
  Number of threads =              1

TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is 1

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential      Parallel    Difference

         0    1377501770    1377501770             0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.106281        0.109262
      RATE:       94.0902         91.5231

TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is 1

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0             0.5             0.5               0

  Efficiency check:

  Computing values in parallel should be faster:'

              Sequential      Parallel

      TIME:      0.305283        0.301553
      RATE:       32.7565         33.1617

TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is 1

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0        -0.30127        -0.30127               0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.258929        0.263455
      RATE:       38.6206         37.9571

TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is 1

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0        0.846175        0.846175               0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.262656        0.263989
      RATE:       38.0726         37.8804

ZIGGURAT_OPENMP:
  Normal end of execution.

14 December 2011 03:15:04 PM
14 December 2011 03:15:04 PM

ZIGGURAT_OPENMP:
  C++ version

  Number of processors available = 8
  Number of threads =              2

TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is 2

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential      Parallel    Difference

         0     517420465     517420465             0
         1    -263094817    -263094817             0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.105809       0.0577431
      RATE:       94.5099         173.181

TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is 2

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0             0.5             0.5               0
         1             0.5             0.5               0

  Efficiency check:

  Computing values in parallel should be faster:'

              Sequential      Parallel

      TIME:      0.303896        0.156634
      RATE:        32.906         63.8432

TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is 2

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0       -0.791915       -0.791915               0
         1         1.09286         1.09286               0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.258784        0.137293
      RATE:       38.6423         72.8369

TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is 2

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0        0.344304        0.344304               0
         1        0.306623        0.306623               0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.261369        0.140172
      RATE:       38.2601         71.3409

ZIGGURAT_OPENMP:
  Normal end of execution.

14 December 2011 03:15:05 PM
14 December 2011 03:15:05 PM

ZIGGURAT_OPENMP:
  C++ version

  Number of processors available = 8
  Number of threads =              4

TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is 4

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential      Parallel    Difference

         0   -1011853174   -1011853174             0
         1    -580314917    -580314917             0
         2   -1582219484   -1582219484             0
         3    1642664340    1642664340             0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.105755       0.0363688
      RATE:       94.5581         274.961

TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is 4

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0             0.5             0.5               0
         1             0.5             0.5               0
         2             0.5             0.5               0
         3             0.5             0.5               0

  Efficiency check:

  Computing values in parallel should be faster:'

              Sequential      Parallel

      TIME:      0.304145       0.0905011
      RATE:       32.8791         110.496

TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is 4

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0        -1.28223        -1.28223               0
         1       -0.980449       -0.980449               0
         2       -0.425568       -0.425568               0
         3     -0.00215607     -0.00215607               0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.258221       0.0800462
      RATE:       38.7265         124.928

TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is 4

  Correctness check:

  Computing values sequentially should reach the
  same result as doing it in parallel:

    THREAD    Sequential        Parallel      Difference

         0        0.960589        0.960589               0
         1         1.58011         1.58011               0
         2         1.39712         1.39712               0
         3        0.233114        0.233114               0

  Efficiency check:

  Computing values in parallel should be faster:

              Sequential      Parallel

      TIME:      0.263212       0.0746841
      RATE:       37.9922         133.897

ZIGGURAT_OPENMP:
  Normal end of execution.

14 December 2011 03:15:06 PM
